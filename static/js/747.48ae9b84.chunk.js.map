{"version":3,"file":"static/js/747.48ae9b84.chunk.js","mappings":"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","sources":["components/RadioGroup.jsx","pages/SubscribersRegister.jsx","components/Form.jsx","utils/FormValidation.js"],"sourcesContent":["import React from \"react\";\n\nconst RadioGroup = ({ name = \"radio-group\", value, options, onChange }) => (\n  <div className=\"radio-box\">\n    {options.map((opt) => {\n      const id = `${name}-${opt.key}`;\n      return (\n        <span className=\"items\" key={opt.key}>\n          <input\n            type=\"radio\"\n            id={id}\n            name={name}\n            value={opt.key}\n            checked={value === opt.key}\n            onChange={onChange}\n            disabled={opt.disabled}\n          />\n          <label htmlFor={id}>{opt.value}</label>\n        </span>\n      );\n    })}\n  </div>\n);\n\nexport default RadioGroup;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SUBSRIBERS_REGISTER_FIELDS } from \"../config/FieldsConfig\";\nimport Button, { BUTTON_CANCEL } from \"../components/Button\";\nimport Input from \"../components/Input\";\nimport RadioGroup from \"../components/RadioGroup\";\nimport Form from \"../components/Form\";\nimport { ROUTES } from \"../constants/routes\";\nimport { InfoMessages } from \"../constants/Message\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport { fieldsValidate } from \"../utils/FormValidation\";\nimport axios from \"../api/axios\";\nimport { KEYS } from \"../constants/Keys\";\nimport { SERVICE_TYPES } from \"../config/OPTIONS\";\n\nconst SubscriberRegister = () => {\n  const navigate = useNavigate();\n  const { showDialog, showAlert, showModal } = useModal();\n\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    // axios.get(\"/api/user/profile\").then(res => {\n    //   setData(prev => ({ ...prev, ...res.data }));\n    // });\n\n    initFormData();\n  }, []);\n\n  // formdata 초기화\n  const initFormData = () => {\n    let data = {};\n    for (const field of SUBSRIBERS_REGISTER_FIELDS) {\n      if (field.type === \"radio\") {\n        data[field.key] = field.options[0].key;\n        continue;\n      }\n      if (field.fields) {\n        for (const subField of field.fields) {\n          data[subField.key] = \"\";\n        }\n      }\n      data[field.key] = \"\";\n    }\n    setFormData({ ...formData, ...data });\n  };\n\n  const cancelEdit = () => {\n    showDialog({\n      message: InfoMessages.confirmCancel,\n      onConfirm: () => navigate(ROUTES.SUBSCRIBERS),\n    });\n  };\n\n  const handleSave = () => {\n    console.log(\"저장할 데이터:\", formData);\n\n    const errValidate = fieldsValidate(SUBSRIBERS_REGISTER_FIELDS, formData);\n    if (errValidate) {\n      showAlert({\n        message: errValidate,\n      });\n      return;\n    }\n\n    // 비밀번호 자동 설정\n    formData[KEYS.PASSWORD] = formData[KEYS.SUB_NO].slice(-4);\n    console.log(\"저장할 데이터:\", formData);\n\n    // axios.post(ROUTES.SUBSCRIBERS, formData).then(res=>{\n    //   showAlert({\n    //     message: InfoMessages.successAccountSave,\n    //     onConfirm: () => navigate(ROUTES.SUBSCRIBERS),\n    //   });\n    // })\n\n    showAlert({\n      message: InfoMessages.successAccountSave,\n      onConfirm: () => navigate(ROUTES.SUBSCRIBERS),\n    });\n  };\n\n  // 가입자 유형 - 개인이면 서비스 유형에서 기업 선택 불가\n  // 가입자 유형 - 법인이면 서비스 유형에서 기업만 선택\n  const serviceTypeOptions = useMemo(() => {\n    const subType = formData[KEYS.SUB_TYPE];\n\n    return SERVICE_TYPES.map((opt) => {\n      if (subType === \"0\") {\n        // 개인: 기업(2) 비활성화\n        return opt.key === \"2\" ? { ...opt, disabled: true } : opt;\n      } else if (subType === \"1\") {\n        // 법인: 기업(2)만 활성화\n        return opt.key === \"2\" ? { ...opt, disabled: false } : { ...opt, disabled: true };\n      }\n      return opt;\n    });\n  }, [formData[KEYS.SUB_TYPE]]);\n\n  useEffect(() => {\n    const subType = formData[KEYS.SUB_TYPE];\n\n    if (subType === \"1\") {\n      // 법인: 기업(2) 강제 선택\n      setFormData((prev) => ({\n        ...prev,\n        [KEYS.SERVICE_TYPE]: \"2\",\n      }));\n    } else if (subType === \"0\") {\n      setFormData((prev) => ({\n        ...prev,\n        [KEYS.SERVICE_TYPE]: \"0\",\n      }));\n    }\n  }, [formData[KEYS.SUB_TYPE]]);\n\n  return (\n    <>\n      <Form className=\"tbl-view\">\n        <table>\n          <colgroup>\n            <col className=\"w250\"></col>\n            <col></col>\n          </colgroup>\n          <tbody>\n            {SUBSRIBERS_REGISTER_FIELDS.map((field, idx) => {\n              const {\n                key,\n                label,\n                type = \"text\",\n                options = [],\n                required,\n                placeholder,\n                comment,\n                disabled,\n                size,\n                fields,\n              } = field;\n              const value = formData[key] ?? \"\";\n\n              const handleChange = (e) => {\n                setFormData((prev) => ({ ...prev, [key]: e.target.value }));\n              };\n\n              return (\n                <tr key={idx}>\n                  <th className=\"Labels\" required={required}>\n                    {label}\n                    {required && <em>*</em>}\n                  </th>\n                  <td className=\"value\">\n                    {type === \"radio\" ? (\n                      <RadioGroup\n                        name={key}\n                        value={value}\n                        options={\n                          key === KEYS.SERVICE_TYPE\n                            ? serviceTypeOptions\n                            : options\n                        }\n                        onChange={handleChange}\n                      />\n                    ) : comment ? (\n                      <div className=\"rowBox\">\n                        <Input\n                          value={value}\n                          type={type}\n                          placeholder={placeholder}\n                          onChange={handleChange}\n                          disabled={disabled}\n                        />\n                        <span className=\"comment\">{comment}</span>\n                      </div>\n                    ) : fields ? (\n                      <div className=\"dflex\">\n                        {fields.map((subField, idx) => (\n                          <div key={subField.key} className=\"rowBox\">\n                            <Input\n                              size=\"sm\"\n                              type={subField.type}\n                              value={formData[subField.key] || \"\"}\n                              onChange={(e) =>\n                                setFormData((prev) => ({\n                                  ...prev,\n                                  [subField.key]: e.target.value,\n                                }))\n                              }\n                              disabled={disabled}\n                            />\n                            {idx === 0 && (\n                              <span className=\"dashCenter\">{\"-\"}</span>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <Input\n                        value={value}\n                        type={type}\n                        placeholder={placeholder}\n                        onChange={handleChange}\n                        size={size}\n                      />\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </Form>\n      <div className=\"btn-wrap\">\n        <div>\n          <Button type={BUTTON_CANCEL} onClick={cancelEdit} />\n        </div>\n        <div>\n          <Button onClick={handleSave} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SubscriberRegister;\n","import React from \"react\";\n\nconst Form = ({ className, onSubmit, children }) => {\n  return (\n    <form\n      className={className}\n      onSubmit={(e) => {\n        e.preventDefault();\n        onSubmit?.();\n      }}\n    >\n      {children}\n    </form>\n  );\n};\n\nexport default Form;\n","import { KEYS } from \"../constants/Keys\";\nimport { ErrorMessages } from \"../constants/Message\";\n\nexport const isValidEmail = (email) => {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n};\n\nexport const isValidPhone = (phone) => {\n  //   const cleaned = phone.replace(/[^0-9]/g, \"\");\n  const regex = /^01[016789]-?\\d{3,4}-?\\d{4}$/;\n  return regex.test(phone);\n};\n\nexport const isValidPassword = (password) => {\n  // 8~20 영문/숫자/특수문자 혼합\n  const regex =\n    /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+{}[\\]|;:'\",.<>/?`~\\\\]).{8,20}$/;\n  return regex.test(password);\n};\n\nexport const hasEmptyValue = (obj) => {\n  if (!obj || Object.keys(obj).length === 0) return true;\n\n  return Object.values(obj).some(\n    (value) =>\n      value == null || // null, undefined\n      (typeof value === \"string\" && value.trim() === \"\") // 공백 문자열\n  );\n};\n\nexport const fieldsValidate = (fields, formData) => {\n  for (const field of fields) {\n    const {\n      key,\n      label,\n      required,\n      type,\n      min,\n      max,\n      length,\n      disabled,\n      fields: nestedFields,\n    } = field;\n\n    if (disabled) continue;\n\n    const value = formData[key];\n\n    // ✅ 1. 기본 필수값 검사\n    if (required && !value && !nestedFields) {\n      return ErrorMessages.required(label);\n    }\n\n    // ✅ 2. 중첩 필드가 있는 경우\n    if (required && nestedFields?.length) {\n      for (const subField of nestedFields) {\n        const subValue = formData[subField.key];\n\n        // 2-1. 필수값\n        if (subValue === undefined || subValue === \"\") {\n          return ErrorMessages.required(`${label}`);\n        }\n\n        // 2-2. 길이 검사 (number 포함)\n        if (subField.length) {\n          const actualLength = String(subValue).length;\n          if (actualLength !== subField.length) {\n            return ErrorMessages.lengthMismatch2(`${label}`, subField.length);\n          }\n        }\n      }\n    }\n\n    // ✅ 3. 타입별 validation\n    if (key === KEYS.MOBILE && !isValidPhone(value)) {\n      return ErrorMessages.invalidPhone;\n    }\n\n    if (type === \"email\" && !isValidEmail(value)) {\n      return ErrorMessages.invalidEmail;\n    }\n\n    // ✅ 4. 길이 검사 (string)\n    if (typeof value === \"string\") {\n      if (min && max && (value.length < min || value.length > max)) {\n        return ErrorMessages.lengthMismatch(label, min, max);\n      }\n\n      if (length && value.length !== length) {\n        return ErrorMessages.lengthMismatch2(label, length);\n      }\n    }\n\n    // ✅ 5. 비밀번호 검사\n    if (type === \"password\") {\n      if (!isValidPassword(value)) {\n        return ErrorMessages.invalidPassword;\n      }\n      if (value !== formData[KEYS.PASSWORD_CONFIRM]) {\n        return ErrorMessages.correctPassword;\n      }\n    }\n  }\n\n  return;\n};"],"names":["_ref","name","value","options","onChange","_jsx","className","children","map","opt","id","key","_jsxs","type","checked","disabled","htmlFor","SubscriberRegister","navigate","useNavigate","showDialog","showAlert","showModal","useModal","formData","setFormData","useState","useEffect","initFormData","data","field","SUBSRIBERS_REGISTER_FIELDS","fields","subField","serviceTypeOptions","useMemo","subType","KEYS","SUB_TYPE","SERVICE_TYPES","prev","SERVICE_TYPE","_Fragment","Form","idx","_formData$key","label","required","placeholder","comment","size","handleChange","e","target","RadioGroup","Input","Button","BUTTON_CANCEL","onClick","cancelEdit","message","InfoMessages","confirmCancel","onConfirm","ROUTES","SUBSCRIBERS","handleSave","console","log","errValidate","fieldsValidate","PASSWORD","SUB_NO","slice","successAccountSave","onSubmit","preventDefault","isValidEmail","email","test","isValidPhone","phone","isValidPassword","password","hasEmptyValue","obj","Object","keys","length","values","some","trim","min","max","nestedFields","ErrorMessages","subValue","undefined","String","lengthMismatch2","MOBILE","invalidPhone","invalidEmail","lengthMismatch","invalidPassword","PASSWORD_CONFIRM","correctPassword"],"sourceRoot":""}