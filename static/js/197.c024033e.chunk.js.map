{"version":3,"file":"static/js/197.c024033e.chunk.js","mappings":"8QAsBA,MAgMA,EAhMsBA,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,WACX,UAAEC,EAAS,WAAEC,IAAeC,EAAAA,EAAAA,OAC3BC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,KAChCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,KAEjCK,EAAAA,EAAAA,YAAU,KACRD,EAAQ,CACN,CACE,CAACE,EAAAA,EAAKC,UAAW,QACjB,CAACD,EAAAA,EAAKE,MAAO,qBACb,CAACF,EAAAA,EAAKG,YAAa,IACnB,CAACH,EAAAA,EAAKI,YAAa,QACnB,CAACJ,EAAAA,EAAKK,YAAa,sBACnB,CAACL,EAAAA,EAAKM,kBAAmB,uBAE3B,CACE,CAACN,EAAAA,EAAKC,UAAW,SACjB,CAACD,EAAAA,EAAKE,MAAO,qBACb,CAACF,EAAAA,EAAKG,YAAa,iCACnB,CAACH,EAAAA,EAAKI,YAAa,OACnB,CAACJ,EAAAA,EAAKK,YAAa,sBACnB,CAACL,EAAAA,EAAKM,kBAAmB,uBAE3B,CACE,CAACN,EAAAA,EAAKC,UAAW,UACjB,CAACD,EAAAA,EAAKE,MAAO,qBACb,CAACF,EAAAA,EAAKG,YAAa,iCACnB,CAACH,EAAAA,EAAKI,YAAa,OACnB,CAACJ,EAAAA,EAAKK,YAAa,sBACnB,CAACL,EAAAA,EAAKM,kBAAmB,uBAE3B,CACE,CAACN,EAAAA,EAAKC,UAAW,OACjB,CAACD,EAAAA,EAAKE,MAAO,qBACb,CAACF,EAAAA,EAAKG,YAAa,iCACnB,CAACH,EAAAA,EAAKI,YAAa,OACnB,CAACJ,EAAAA,EAAKK,YAAa,sBACnB,CAACL,EAAAA,EAAKM,kBAAmB,uBAE3B,CACE,CAACN,EAAAA,EAAKC,UAAW,MACjB,CAACD,EAAAA,EAAKE,MAAO,qBACb,CAACF,EAAAA,EAAKG,YAAa,iCACnB,CAACH,EAAAA,EAAKI,YAAa,OACnB,CAACJ,EAAAA,EAAKK,YAAa,sBACnB,CAACL,EAAAA,EAAKM,kBAAmB,wBAE3B,GAWD,IAEH,MAAMC,EAASA,KACblB,EAAU,CACRmB,QAASC,EAAAA,GAAaC,gBACtB,EAaEC,EAAYA,KACU,IAAtBnB,EAAWoB,OAMXpB,EAAWoB,OAAS,EACtBvB,EAAU,CACRmB,QAASK,EAAAA,GAAcC,YAK3B7B,EAAS8B,EAAAA,EAAOC,aAAc,CAC5BC,MAAO,CACLC,WAAY1B,EAAW,GAAG2B,GAC1BC,aAAc5B,EAAW,MAf3BH,EAAU,CACRmB,QAASK,EAAAA,GAAcQ,WAgBzB,EAGEC,EAAcA,KACQ,IAAtB9B,EAAWoB,OAOftB,EAAW,CACTkB,QAASC,EAAAA,GAAac,cAAc/B,EAAWoB,QAC/CY,UAAWC,IARXpC,EAAU,CACRmB,QAASK,EAAAA,GAAcQ,WAQzB,EAGEI,EAAgBA,KAAO,IAADC,EAS1B5B,GAAS6B,GACPA,EAAKC,QACFC,IACErC,EAAWsC,MACTC,GAAaA,EAAS/B,EAAAA,EAAKC,YAAc4B,EAAK7B,EAAAA,EAAKC,gBAK5C,QAAhByB,EAAAvC,EAAS6C,eAAO,IAAAN,GAAhBA,EAAkBO,iBAClBxC,EAAc,IAEdyC,YAAW,KACT7C,EAAU,CACRmB,QAASC,EAAAA,GAAa0B,eACtB,GACD,IAAI,EAeT,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,UAAU,aAAaC,SAAUnC,EAAO+B,UAC5CC,EAAAA,EAAAA,KAAA,SAAOE,UAAU,YAAWH,UAC1BC,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,8BAA6BH,SAAA,EAC1CC,EAAAA,EAAAA,KAACI,EAAAA,GAAK,CACJC,MAAOjD,EACPkD,SAAWC,GAAMlD,EAAWkD,EAAEC,OAAOH,OACrCI,YAAaC,EAAAA,GAAgBC,kBAC7BC,KAAMC,EAAAA,MAERb,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CAACC,KAAMC,EAAAA,GAAeC,QAASjD,KACtCgC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CACLI,MAAOC,EAAAA,EAAOC,cACdH,QAASA,IAAMvE,EAAS8B,EAAAA,EAAO6C,kCAQ7CrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CACJC,IAAK3E,EACL4E,QAASC,EAAAA,GACTnE,KAAMA,EACNoE,SAAU,EACVC,qBAAsBzE,EACtB0E,QA3CUA,KAEZ/B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CACHI,MAAOC,EAAAA,EAAOU,UACdZ,QAAS7C,KAEZ4B,EAAAA,EAAAA,KAACc,EAAAA,GAAM,CAACC,KAAMe,EAAAA,GAAeb,QAASlC,WAsCxC,C","sources":["pages/Accounts.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Table from \"../components/Table\";\nimport Button, {\n  BUTTON_CANCEL,\n  BUTTON_DELETE,\n  BUTTON_SEARCH,\n} from \"../components/Button\";\nimport Input, { INPUT_SIZE_LG } from \"../components/Input\";\nimport { ACCOUNTS_COLUMNS } from \"../config/DataConfig\";\nimport { ROUTES } from \"../constants/routes\";\nimport {\n  AccountMessages,\n  ErrorMessages,\n  InfoMessages,\n} from \"../constants/Message\";\nimport { LABELS } from \"../constants/Labels\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport axios from \"../api/axios\";\nimport { KEYS } from \"../constants/Keys\";\nimport Form from \"../components/Form\";\n\nconst AccountManage = () => {\n  const navigate = useNavigate();\n  const tableRef = useRef();\n  const { showAlert, showDialog } = useModal();\n  const [selectRows, setselectRows] = useState([]);\n  const [keyword, setKeyword] = useState(\"\");\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    setData([\n      {\n        [KEYS.ADMIN_ID]: \"admin\",\n        [KEYS.NAME]: \"관리자\",\n        [KEYS.DEPARTMENT]: \"-\",\n        [KEYS.ADMIN_TYPE]: \"Admin\",\n        [KEYS.CREATED_AT]: \"2024.02.04 11:23:37\",\n        [KEYS.LAST_ACCESS_TIME]: \"2024.02.04 11:23:27\",\n      },\n      {\n        [KEYS.ADMIN_ID]: \"cwback\",\n        [KEYS.NAME]: \"백창우\",\n        [KEYS.DEPARTMENT]: \"고객만족팀\",\n        [KEYS.ADMIN_TYPE]: \"User\",\n        [KEYS.CREATED_AT]: \"2024.02.04 11:23:37\",\n        [KEYS.LAST_ACCESS_TIME]: \"2024.02.01 09:12:35\",\n      },\n      {\n        [KEYS.ADMIN_ID]: \"wooseok\",\n        [KEYS.NAME]: \"주우석\",\n        [KEYS.DEPARTMENT]: \"고객만족팀\",\n        [KEYS.ADMIN_TYPE]: \"User\",\n        [KEYS.CREATED_AT]: \"2024.02.04 11:23:37\",\n        [KEYS.LAST_ACCESS_TIME]: \"2024.02.02 12:03:04\",\n      },\n      {\n        [KEYS.ADMIN_ID]: \"hong\",\n        [KEYS.NAME]: \"홍길동\",\n        [KEYS.DEPARTMENT]: \"고객만족팀\",\n        [KEYS.ADMIN_TYPE]: \"User\",\n        [KEYS.CREATED_AT]: \"2024.04.23 10:55:45\",\n        [KEYS.LAST_ACCESS_TIME]: \"2024.04.23 11:55:01\",\n      },\n      {\n        [KEYS.ADMIN_ID]: \"kim\",\n        [KEYS.NAME]: \"김철수\",\n        [KEYS.DEPARTMENT]: \"고객만족팀\",\n        [KEYS.ADMIN_TYPE]: \"User\",\n        [KEYS.CREATED_AT]: \"2024.04.29 01:24:35\",\n        [KEYS.LAST_ACCESS_TIME]: \"2024.04.30 05:13:09\",\n      },\n    ]);\n    // TODO :: 최초 로드는 전체 리스트 출력 하는지? , keywords를 빈값으로 보내면 되는건지?\n    // axios.get(ROUTES.ACCOUNTS, keyword).then((res) => {\n    //   if (res.data.length === 0) {\n    //     showAlert({\n    //       message: InfoMessages.noSearchResult,\n    //     });\n    //     return;\n    //   }\n    //   setData(res.data);\n    // });\n  }, []);\n\n  const search = () => {\n    showAlert({\n      message: InfoMessages.noSearchResult,\n    });\n\n    // axios.get(ROUTES.ACCOUNTS, { params: { keyword } }).then((res) => {\n    //   if (res.data.length === 0) {\n    //     showAlert({\n    //       message: InfoMessages.noSearchResult,\n    //     });\n    //     return;\n    //   }\n    //   setData(res.data);\n    // });\n  };\n\n  const clickEdit = () => {\n    if (selectRows.length === 0) {\n      showAlert({\n        message: ErrorMessages.nonSelect,\n      });\n      return;\n    }\n    if (selectRows.length > 1) {\n      showAlert({\n        message: ErrorMessages.oneSelect,\n      });\n      return;\n    }\n\n    navigate(ROUTES.ACCOUNT_EDIT, {\n      state: {\n        selectedId: selectRows[0].id,\n        selectedInfo: selectRows[0], // TOBE :: 삭제\n      },\n    });\n  };\n\n  const clickDelete = () => {\n    if (selectRows.length === 0) {\n      showAlert({\n        message: ErrorMessages.nonSelect,\n      });\n      return;\n    }\n\n    showDialog({\n      message: InfoMessages.confirmDelete(selectRows.length),\n      onConfirm: deleteAccount,\n    });\n  };\n\n  const deleteAccount = () => {\n    // for (const selectedRow of selectRows) {\n    //   axios.delete(ROUTES.ACCOUNTS_MANAGE(selectedRow.adminId)).then(res => {\n    //     showAlert({\n    //       message: InfoMessages.successDelete,\n    //     });\n    //   })\n    // }\n\n    setData((prev) =>\n      prev.filter(\n        (item) =>\n          !selectRows.some(\n            (selected) => selected[KEYS.ADMIN_ID] === item[KEYS.ADMIN_ID]\n          )\n      )\n    );\n\n    tableRef.current?.clearSelection();\n    setselectRows([]); // 선택 초기화\n\n    setTimeout(() => {\n      showAlert({\n        message: InfoMessages.successDelete,\n      });\n    }, 100);\n  };\n\n  const topBtns = () => {\n    return (\n      <>\n        <Button\n            label={LABELS.USER_EDIT}\n            onClick={clickEdit}\n          />\n         <Button type={BUTTON_DELETE} onClick={clickDelete} />\n      </>\n    );\n  };\n\n  return (\n    <>\n      <Form className=\"search-box\" onSubmit={search}>\n        <table className=\"tbl-input\">\n          <tbody>\n            <tr>\n              <td>\n                <div className=\"form-field dflex wrap gap10\">\n                  <Input\n                    value={keyword}\n                    onChange={(e) => setKeyword(e.target.value)}\n                    placeholder={AccountMessages.searchPlaceHolder}\n                    size={INPUT_SIZE_LG}\n                  />\n                  <Button type={BUTTON_SEARCH} onClick={search} />\n                  <Button\n                    label={LABELS.USER_REGISTER}\n                    onClick={() => navigate(ROUTES.ACCOUNT_REGISTER)}\n                  />\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </Form>\n      <Table\n        ref={tableRef}\n        columns={ACCOUNTS_COLUMNS}\n        data={data}\n        pageSize={5}\n        onRowSelectionChange={setselectRows}\n        topBtns={topBtns}\n      />\n    </>\n  );\n};\n\nexport default AccountManage;\n"],"names":["AccountManage","navigate","useNavigate","tableRef","useRef","showAlert","showDialog","useModal","selectRows","setselectRows","useState","keyword","setKeyword","data","setData","useEffect","KEYS","ADMIN_ID","NAME","DEPARTMENT","ADMIN_TYPE","CREATED_AT","LAST_ACCESS_TIME","search","message","InfoMessages","noSearchResult","clickEdit","length","ErrorMessages","oneSelect","ROUTES","ACCOUNT_EDIT","state","selectedId","id","selectedInfo","nonSelect","clickDelete","confirmDelete","onConfirm","deleteAccount","_tableRef$current","prev","filter","item","some","selected","current","clearSelection","setTimeout","successDelete","_jsxs","_Fragment","children","_jsx","Form","className","onSubmit","Input","value","onChange","e","target","placeholder","AccountMessages","searchPlaceHolder","size","INPUT_SIZE_LG","Button","type","BUTTON_SEARCH","onClick","label","LABELS","USER_REGISTER","ACCOUNT_REGISTER","Table","ref","columns","ACCOUNTS_COLUMNS","pageSize","onRowSelectionChange","topBtns","USER_EDIT","BUTTON_DELETE"],"sourceRoot":""}