{"version":3,"file":"static/js/866.17da3c0e.chunk.js","mappings":"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","sources":["components/PhoneNumberInput.jsx","components/modals/PasswordChange.jsx","pages/ProfileEdit.jsx","components/Form.jsx","utils/FormValidation.js"],"sourcesContent":["import React from \"react\";\nimport { InfoMessages } from \"../constants/Message\";\n\nconst formatPhoneNumber = (value) => {\n  const digits = value.replace(/\\D/g, \"\");\n\n  if (digits.length <= 3) return digits;\n  if (digits.length <= 7) return `${digits.slice(0, 3)}-${digits.slice(3)}`;\n  if (digits.length <= 11)\n    return `${digits.slice(0, 3)}-${digits.slice(3, 7)}-${digits.slice(7)}`;\n\n  return `${digits.slice(0, 3)}-${digits.slice(3, 7)}-${digits.slice(7, 11)}`;\n};\n\nconst PhoneNumberInput = ({ value, onChange, size = \"nm\" }) => {\n  const handleChange = (e) => {\n    const formatted = formatPhoneNumber(e.target.value);\n    const syntheticEvent = {\n      ...e,\n      target: {\n        ...e.target,\n        value: formatted,\n      },\n    };\n    onChange?.(syntheticEvent);\n  };\n\n  return (\n    <input\n      className={`form-input ${size}`}\n      type=\"text\"\n      value={value}\n      onChange={handleChange}\n      maxLength={13}\n      placeholder={InfoMessages.mobile}\n    />\n  );\n};\n\nexport default PhoneNumberInput;\n","import React from \"react\";\nimport Input from \"../Input\";\nimport { PASSWORD_CHANGE_FIELDS } from \"../../config/FieldsConfig\";\nimport { LABELS } from \"../../constants/Labels\";\nimport { useDispatch } from \"react-redux\";\nimport { setPasswordField } from \"../../features/passwordSlice\";\n\nconst PasswordChange = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = (key, value) => {\n    dispatch(setPasswordField({ key, value }));\n  };\n\n  return (\n    <div className=\"vFlex\">\n      {PASSWORD_CHANGE_FIELDS.map(({ key, placeholder }) => (\n        <Input\n          key={key}\n          size=\"fl\"\n          type=\"password\"\n          placeholder={placeholder}\n          onChange={(e) => handleChange(key, e.target.value)}\n        />\n      ))}\n      <span>{LABELS.PASSWORD_CHECK2}</span>\n    </div>\n  );\n};\n\nexport default PasswordChange;\n","import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { PROFILE_EDIT_FIELDS } from \"../config/FieldsConfig\";\nimport Button, { BUTTON_CANCEL, BUTTON_SAVE } from \"../components/Button\";\nimport Input from \"../components/Input\";\nimport { ROUTES } from \"../constants/routes\";\nimport {\n  hasEmptyValue,\n  isValidEmail,\n  isValidPassword,\n  isValidPhone,\n} from \"../utils/FormValidation\";\nimport {\n  ErrorMessages,\n  InfoMessages,\n  ProfileMessages,\n} from \"../constants/Message\";\nimport { LABELS } from \"../constants/Labels\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport PasswordChange from \"../components/modals/PasswordChange\";\nimport axios from \"../api/axios\";\nimport { KEYS } from \"../constants/Keys\";\nimport { useDispatch } from \"react-redux\";\nimport { logout } from \"../features/authSlice\";\nimport { MODAL_SM } from \"../components/modals/ModalRenderer\";\nimport PhoneNumberInput from \"../components/PhoneNumberInput\";\nimport Form from \"../components/Form\";\nimport { resetPasswordFields } from \"../features/passwordSlice\";\nimport { store } from \"../store\";\n\nconst ProfileEdit = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { showDialog, showAlert, showModal, closeModal } = useModal();\n\n  const [formData, setFormData] = useState({});\n\n  const adminId = \"\";\n\n  useEffect(() => {\n    setFormData({\n      [KEYS.ADMIN_TYPE]: \"Admin\",\n      [KEYS.DEPARTMENT]: \"운영팀\",\n      [KEYS.ADMIN_ID]: \"vFRAS\",\n      [KEYS.PASSWORD]: \"!sdf423\",\n      [KEYS.NAME]: \"홍길동\",\n      [KEYS.MOBILE]: \"010-1234-5678\",\n      [KEYS.EMAIL]: \"test@lguplus.co.kr\",\n    });\n\n    // axios.get(ROUTES.PROFILE, adminId).then((res) => {\n    //   setFormData((prev) => ({ ...prev, ...res.data }));\n    // });\n  }, []);\n\n  const validate = () => {\n    const newErrors = {};\n    if (!isValidEmail(formData[KEYS.EMAIL])) {\n      showAlert({\n        message: ErrorMessages.invalidEmail,\n      });\n      return;\n    }\n\n    if (!isValidPhone(formData[KEYS.MOBILE])) {\n      showAlert({\n        message: ErrorMessages.invalidPhone,\n      });\n      return;\n    }\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSave = () => {\n    if (!validate()) {\n      return;\n    }\n    console.log(\"저장할 데이터:\", formData);\n    // axios.put(ROUTES.PASSWORD_CHANGE(adminId), formData).then((res) => {\n    //   showAlert({\n    //     message: ProfileMessages.successUserEdit,\n    //     onConfirm: () => navigate(ROUTES.PROFILE),\n    //   });\n    // });\n\n    showAlert({\n      message: ProfileMessages.successUserEdit,\n      onConfirm: () => navigate(ROUTES.SUBSCRIBERS),\n    });\n  };\n\n  const cancelEdit = () => {\n    showDialog({\n      message: InfoMessages.confirmCancel,\n      onConfirm: () => navigate(ROUTES.SUBSCRIBERS),\n    });\n  };\n\n  const clickChangePassword = () => {\n    showModal({\n      content: <PasswordChange />,\n      header: LABELS.PASSWORD_CHANGE,\n      onConfirm: () => changePassword(),\n      onClose : () =>  dispatch(resetPasswordFields()),\n      size: MODAL_SM,\n    });\n  };\n\n  const changePassword = () => {\n    const passwordData = store.getState().changePassword;\n    console.log(passwordData)\n    // 1. 빈 값 확인\n    if (hasEmptyValue(passwordData)) {\n      showAlert({\n        message: ErrorMessages.emptyValue,\n      });\n      return;\n    }\n\n    // 2. 현재 비밀번호 확인\n    if (passwordData[KEYS.PASSWORD] !== formData[KEYS.PASSWORD]) {\n      showAlert({\n        message: ErrorMessages.confirmCurrentPassword,\n      });\n      return;\n    }\n\n    // // 3. 변경 비밀번호 validation\n    if (!isValidPassword(passwordData[KEYS.NEW_PASSWORD1])) {\n      showAlert({\n        message: ErrorMessages.invalidPassword,\n      });\n      return;\n    }\n\n    // // 4. 변경 비밀번호 재확인\n    if (passwordData[KEYS.NEW_PASSWORD1] !== passwordData[KEYS.NEW_PASSWORD2]) {\n      showAlert({\n        message: ErrorMessages.confirmPassword,\n      });\n      return;\n    }\n\n    // axios.put(ROUTES.PROFILE_EDIT(adminId), formData).then((res) => {\n    //   showAlert({\n    //     message: ProfileMessages.successPasswordChange,\n    //     onConfirm: () => {\n    //       closeModal();\n    //       dispatch(logout());\n    //     },\n    //   });\n    // });\n\n    closeModal();\n    setTimeout(() => {\n      showAlert({\n        message: ProfileMessages.successPasswordChange,\n        onConfirm: () => {\n          closeModal();\n          dispatch(logout());\n        },\n      });\n    }, 100);\n\n    // 완료 후 초기화\n    dispatch(resetPasswordFields());\n  };\n\n  return (\n    <>\n      <span>{ProfileMessages.info1}</span>\n      <Form className=\"tbl-view\">\n        <table>\n          <colgroup>\n            <col className=\"w250\"></col>\n            <col></col>\n          </colgroup>\n          <tbody>\n            {PROFILE_EDIT_FIELDS.map((field) => {\n              const { key, disabled, type } = field;\n\n              const value = formData[key] || \"\";\n\n              const handleChange = (e) => {\n                setFormData((prev) => ({ ...prev, [key]: e.target.value }));\n              };\n\n              return (\n                <tr key={key}>\n                  <th className=\"Labels\">\n                    <label>{field.label}</label>\n                  </th>\n                  <td className=\"value\">\n                    {key === KEYS.PASSWORD ? (\n                      <div className=\"rowBox\">\n                        <Input\n                          size=\"nm\"\n                          type={type}\n                          onChange={handleChange}\n                          disabled={disabled}\n                        />\n                        <Button\n                          type={BUTTON_CANCEL}\n                          label={LABELS.PASSWORD_CHANGE}\n                          onClick={clickChangePassword}\n                        />\n                      </div>\n                    ) : key === KEYS.MOBILE ? (\n                      <PhoneNumberInput value={value} onChange={handleChange} />\n                    ) : (\n                      <>\n                        <Input\n                          value={value}\n                          type={field.type}\n                          placeholder={formData[key]}\n                          onChange={handleChange}\n                          disabled={disabled}\n                        />\n                      </>\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </Form>\n      <div className=\"btn-wrap\">\n        <div>\n          <Button type={BUTTON_CANCEL} onClick={cancelEdit} />\n        </div>\n        <div>\n          <Button type={BUTTON_SAVE} onClick={handleSave} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProfileEdit;","import React from \"react\";\n\nconst Form = ({ className, onSubmit, children }) => {\n  return (\n    <form\n      className={className}\n      onSubmit={(e) => {\n        e.preventDefault();\n        onSubmit?.();\n      }}\n    >\n      {children}\n    </form>\n  );\n};\n\nexport default Form;\n","import { KEYS } from \"../constants/Keys\";\nimport { ErrorMessages } from \"../constants/Message\";\n\nexport const isValidEmail = (email) => {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n};\n\nexport const isValidPhone = (phone) => {\n  //   const cleaned = phone.replace(/[^0-9]/g, \"\");\n  const regex = /^01[016789]-?\\d{3,4}-?\\d{4}$/;\n  return regex.test(phone);\n};\n\nexport const isValidPassword = (password) => {\n  // 8~20 영문/숫자/특수문자 혼합\n  const regex =\n    /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+{}[\\]|;:'\",.<>/?`~\\\\]).{8,20}$/;\n  return regex.test(password);\n};\n\nexport const hasEmptyValue = (obj) => {\n  if (!obj || Object.keys(obj).length === 0) return true;\n\n  return Object.values(obj).some(\n    (value) =>\n      value == null || // null, undefined\n      (typeof value === \"string\" && value.trim() === \"\") // 공백 문자열\n  );\n};\n\nexport const fieldsValidate = (fields, formData) => {\n  for (const field of fields) {\n    const {\n      key,\n      label,\n      required,\n      type,\n      min,\n      max,\n      length,\n      disabled,\n      fields: nestedFields,\n    } = field;\n\n    if (disabled) continue;\n\n    const value = formData[key];\n\n    // ✅ 1. 기본 필수값 검사\n    if (required && !value && !nestedFields) {\n      return ErrorMessages.required(label);\n    }\n\n    // ✅ 2. 중첩 필드가 있는 경우\n    if (required && nestedFields?.length) {\n      for (const subField of nestedFields) {\n        const subValue = formData[subField.key];\n\n        // 2-1. 필수값\n        if (subValue === undefined || subValue === \"\") {\n          return ErrorMessages.required(`${label}`);\n        }\n\n        // 2-2. 길이 검사 (number 포함)\n        if (subField.length) {\n          const actualLength = String(subValue).length;\n          if (actualLength !== subField.length) {\n            return ErrorMessages.lengthMismatch2(`${label}`, subField.length);\n          }\n        }\n      }\n    }\n\n    // ✅ 3. 타입별 validation\n    if (key === KEYS.MOBILE && !isValidPhone(value)) {\n      return ErrorMessages.invalidPhone;\n    }\n\n    if (type === \"email\" && !isValidEmail(value)) {\n      return ErrorMessages.invalidEmail;\n    }\n\n    // ✅ 4. 길이 검사 (string)\n    if (typeof value === \"string\") {\n      if (min && max && (value.length < min || value.length > max)) {\n        return ErrorMessages.lengthMismatch(label, min, max);\n      }\n\n      if (length && value.length !== length) {\n        return ErrorMessages.lengthMismatch2(label, length);\n      }\n    }\n\n    // ✅ 5. 비밀번호 검사\n    if (type === \"password\") {\n      if (!isValidPassword(value)) {\n        return ErrorMessages.invalidPassword;\n      }\n      if (value !== formData[KEYS.PASSWORD_CONFIRM]) {\n        return ErrorMessages.correctPassword;\n      }\n    }\n  }\n\n  return;\n};"],"names":["_ref","value","onChange","size","_jsx","className","type","e","formatted","digits","replace","length","slice","formatPhoneNumber","target","syntheticEvent","maxLength","placeholder","InfoMessages","mobile","PasswordChange","dispatch","useDispatch","_jsxs","children","PASSWORD_CHANGE_FIELDS","map","key","Input","handleChange","setPasswordField","LABELS","PASSWORD_CHECK2","ProfileEdit","navigate","useNavigate","showDialog","showAlert","showModal","closeModal","useModal","formData","setFormData","useState","useEffect","KEYS","ADMIN_TYPE","DEPARTMENT","ADMIN_ID","PASSWORD","NAME","MOBILE","EMAIL","clickChangePassword","content","header","PASSWORD_CHANGE","onConfirm","changePassword","onClose","resetPasswordFields","MODAL_SM","passwordData","store","getState","console","log","hasEmptyValue","message","ErrorMessages","emptyValue","isValidPassword","NEW_PASSWORD1","NEW_PASSWORD2","setTimeout","ProfileMessages","successPasswordChange","logout","confirmPassword","invalidPassword","confirmCurrentPassword","_Fragment","info1","Form","PROFILE_EDIT_FIELDS","field","disabled","prev","label","Button","BUTTON_CANCEL","onClick","PhoneNumberInput","cancelEdit","confirmCancel","ROUTES","SUBSCRIBERS","BUTTON_SAVE","handleSave","validate","isValidEmail","isValidPhone","Object","keys","invalidPhone","invalidEmail","successUserEdit","onSubmit","preventDefault","email","test","phone","password","obj","values","some","trim","fieldsValidate","fields","required","min","max","nestedFields","subField","subValue","undefined","String","lengthMismatch2","lengthMismatch","PASSWORD_CONFIRM","correctPassword"],"sourceRoot":""}